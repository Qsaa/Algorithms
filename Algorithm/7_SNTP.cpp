/*
7 SNTP
Ограничение времени	1 секунда
Ограничение памяти	64Mb
Ввод	стандартный ввод или input.txt
Вывод	стандартный вывод или output.txt

Для того чтобы компьютеры поддерживали актуальное время, они могут обращаться к серверам 
точного времени SNTP(Simple Network Time Protocol).К сожалению, компьютер не может просто 
получить время у сервера, потому что информация по сети передаётся не мгновенно : пока 
сообщение с текущим временем дойдёт до компьютера, оно потеряет свою актуальность.
Протокол взаимодействия клиента(компьютера, запрашивающего точное время) и 
сервера(компьютера, выдающего точное время) выглядит следующим образом :

1. Клиент отправляет запрос на сервер и запоминает время отправления A(по клиентскому времени).
2. Сервер получает запрос в момент времени B(по точному серверному времени) и 
отправляет клиенту сообщение, содержащее время B.
3. Клиент получает ответ на свой запрос в момент времени C(по клиентскому времени) и 
запоминает его.Теперь клиент, из предположения, что сетевые задержки при передаче 
сообщений от клиента серверу и от сервера клиенту одинаковы, может определить и 
установить себе точное время, используя известные значения A, B, C.

Вам предстоит реализовать алгоритм, с точностью до секунды определяющий точное время для 
установки на клиенте по известным A, B и C.При необходимости округлите результат до целого 
числа секунд по правилам арифметики(в меньшую сторону, если дробная часть числа
	меньше 1 / 2, иначе в большую сторону).

Возможно, что, пока клиент ожидал ответа, по клиентскому времени успели наступить новые 
сутки, однако известно, что между отправкой клиентом запроса и получением ответа от 
сервера прошло менее 24 часов.


Формат ввода
Программа получает на вход три временные метки A, B, C, по одной в каждой строке.Все временные 
метки представлены в формате «hh : mm:ss», где «hh» – это часы, «mm» – минуты, «ss» – секунды.
Часы, минуты и секунды записываются ровно двумя цифрами каждое(возможно, с дополнительными нулями в начале числа).

Формат вывода
Программа должна вывести одну временную метку в формате, описанном во входных данных, – вычисленное 
точное время для установки на клиенте.В выводе не должно быть пробелов, пустых строк в начале вывода.

Пример
Ввод
15:01:00
18:09:45
15:01:40
Вывод
18:10:05

https ://contest.yandex.ru/contest/45469/problems/7/
*/


#include <iostream>
#include <string>
#include <cmath>

using namespace std;


class Time
{	
public:
	Time(const char (&str)[9])
	{
		hour_ = (str[0] - 48) * 10 + (str[1] - 48);
		min_ = (str[3] - 48) * 10 + (str[4] - 48);
		sec_ = (str[6] - 48) * 10 + (str[7] - 48);
	}
	Time(int hour, int min, int sec) :hour_(hour), min_(min), sec_(sec)
	{}

	void print()
	{
		string out = "00:00:00";
		out[0] = (hour_ / 10) + 48;
		out[1] = (hour_ % 10) + 48;

		out[3] = (min_ / 10) + 48;
		out[4] = (min_ % 10) + 48;

		out[6] = (sec_ / 10) + 48;
		out[7] = (sec_ % 10) + 48;
		cout << out << endl;
	}
	Time operator-(const Time& t) const
	{
		int p_min = 0;
		int p_hour = 0;

		int hour;
		int min;
		int sec;

		sec = sec_ - t.sec_;
		if (sec < 0)
		{
			sec += 60;
			p_min = 1;
		}

		min = min_ - (t.min_ + p_min);
		if (min < 0)
		{
			min += 60;
			p_hour = 1;
		}

		hour = hour_ - (t.hour_ + p_hour);
		if (hour < 0)
		{
			hour += 24;
		}
		return Time(hour, min, sec);
	}
	Time operator+(const Time& t) const
	{
		int p_min = 0;
		int p_hour = 0;

		int hour;
		int min;
		int sec;

		sec = sec_ + t.sec_;
		if (sec >= 60)
		{
			sec -= 60;
			p_min = 1;
		}

		min = min_ + (t.min_ + p_min);
		if (min >= 60)
		{
			min -= 60;
			p_hour = 1;
		}

		hour = hour_ + (t.hour_ + p_hour);
		if (hour >= 24)
		{
			hour -= 24;
		}
		return Time(hour, min, sec);
	}

	Time operator/ (float del) const
	{
		int sec = round((((hour_ * 60) + min_) * 60 + sec_) / del);
		int min = sec / 60;
		int hour = min / 60;

		sec %= 60;
		min %= 60;

		return Time(hour, min, sec);
	}


private:
	int hour_;
	int min_;
	int sec_;
};

Time SNTP(const Time& out, const Time& time, const Time& in)
{
	return Time(time + (in - out) / 2);
}

int test_SNTP()
{
	char str_out[9]; cin >> str_out;
	char str_time[9]; cin >> str_time;
	char str_in[9]; cin >> str_in;

	SNTP(Time(str_out), Time(str_time), Time(str_in)).print();
	return 0;
}