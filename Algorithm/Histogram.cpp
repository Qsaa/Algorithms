

/*
* Вовочка ломает систему безопасности Пентагона. Для этого ему понадобилось узнать, какие
символы в секретных зашифрованных посланиях употребляются чаще других. Для удобства изучения
Вовочка хочет получить графическое представление встречаемости символов. Поэтому он хочет построить
гистограмму количества символов в сообщении. Гистограмма — это график, в котором каждому символу,
встречающемуся в сообщении хотя бы один раз, соответствует столбик, высота которого пропорциональна
количеству этих символов в сообщении.

Формат ввода
Входной файл содержит зашифрованный текст сообщения. Он содержит строчные и прописные латинские буквы,
цифры, знаки препинания («.», «!», «?», «:», «-», «,», «;», «(», «)»), пробелы и переводы строк. Размер
входного файла не превышает 10000 байт. Текст содержит хотя бы один непробельный символ. Все строки
входного файла не длиннее 200 символов.Для каждого символа c кроме пробелов и переводов строк выведите
столбик из символов «#», количество которых должно быть равно количеству символов c в данном тексте.
Под каждым столбиком напишите символ, соответствующий ему. Отформатируйте гистограмму так, чтобы нижние
концы столбиков были на одной строке, первая строка и первый столбец были непустыми. Не отделяйте
столбики друг от друга. Отсортируйте столбики в порядке увеличения кодов символов.

Формат вывода
Для каждого символа c кроме пробелов и переводов строк выведите столбик из символов «#», количество
которых должно быть равно количеству символов c в данном тексте. Под каждым столбиком напишите символ,
соответствующий ему. Отформатируйте гистограмму так, чтобы нижние концы столбиков были на одной строке,
первая строка и первый столбец были непустыми. Не отделяйте столбики друг от друга. Отсортируйте
столбики в порядке увеличения кодов символов.
*
*/
#include <iostream>
#include <map>
using namespace std;

void histogram(const string& s)
{
    size_t top = 0;
    map<char, size_t> dict_c;
    for (auto c : s)
    {
        if (c != ' ')
        {
            dict_c[c] += 1;
            if (dict_c[c] > top)
            {
                top = dict_c[c];
            }
        }
    }

    for (; top; --top)
    {
        for (auto el : dict_c)
        {
            if (el.second >= top)
            {
                cout << '#';
            }
            else
            {
                cout << ' ';
            }
        }
        cout << endl;
    }
    for (auto el : dict_c)
    {
        cout << el.first;
    }
    cout << endl;
}

void test_histogram()
{
    histogram("Hello, world!");
    //histogram("Twas brillig, and the slithy toves\
    //           Did gyre and gimble in the wabe;\
    //           All mimsy were the borogoves,\
    //           And the mome raths outgrabe.");
}